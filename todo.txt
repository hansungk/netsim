-*- org -*-

* TODO
- Deadlock avoidance => 1 time
  - Dedicated/free VCs
- Latency vs. offerred traffic curve => MANY times
  - For torus: Figure 23.4
- Parking lot problem => 1 time
- Pipeline diagram? => 1 time
- XY routing (minimal, oblivious)
- Load imbalancing of XY-routing => impl. + 1 time
- Event-driven: show simulator does not progress further after => 1 time
  deadlock
X Benefits of VC-based flow control compared to wormhole
X Age-based priority?

* Questions
- VC: increases switch input/output ports? => This is what input speedup is.

* Latency model
- "ready" bit?
  - Closely resembles HW implementation
  - Simpler, but may be too low level? This is basically how HDLs do
    it.
- Event queue?
  - Probably the most popular method. (gem5, MARSSx86)
  - How do we combine this with a detailed cycle-accurate OoO engine?
    Doesn't an OoO engine always do _something_ at every cycle?
- Latency object?
  - Basically what SimpleScalar does
  - Return <lat, value> pair from access functions
  - Maybe useful in implementing 'oracle', ahead-of-time simulation features
  - More complicated code
- FIFO queues?
  - Overkill?
